{"ast":null,"code":"import AudioContext from './AudioContext';\nvar drawVisual = void 0;\nvar Visualizer = {\n  visualizeSineWave: function visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var analyser = AudioContext.getAnalyser();\n    var bufferLength = analyser.fftSize;\n    var dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteTimeDomainData(dataArray);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n      canvasCtx.lineWidth = 2;\n      canvasCtx.strokeStyle = strokeColor;\n      canvasCtx.beginPath();\n      var sliceWidth = width * 1.0 / bufferLength;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        var v = dataArray[i] / 128.0;\n        var y = v * height / 2;\n\n        if (i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      canvasCtx.lineTo(canvas.width, canvas.height / 2);\n      canvasCtx.stroke();\n    }\n\n    ;\n    draw();\n  },\n  visualizeFrequencyBars: function visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var self = this;\n    var analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 256;\n    var bufferLength = analyser.frequencyBinCount;\n    var dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n      var barWidth = width / bufferLength * 2.5;\n      var barHeight = void 0;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n        var rgb = self.hexToRgb(strokeColor); // canvasCtx.fillStyle = `rgb(${barHeight+100},${rgb.g},${rgb.b})`;\n\n        canvasCtx.fillStyle = strokeColor;\n        canvasCtx.fillRect(x, height - barHeight / 2, barWidth, barHeight / 2);\n        x += barWidth + 1;\n      }\n    }\n\n    ;\n    draw();\n  },\n  visualizeFrequencyCircles: function visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var self = this;\n    var analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 32;\n    var bufferLength = analyser.frequencyBinCount;\n    var dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n      var reductionAmount = 3;\n      var reducedDataArray = new Uint8Array(bufferLength / reductionAmount);\n\n      for (var i = 0; i < bufferLength; i += reductionAmount) {\n        var sum = 0;\n\n        for (var j = 0; j < reductionAmount; j++) {\n          sum += dataArray[i + j];\n        }\n\n        reducedDataArray[i / reductionAmount] = sum / reductionAmount;\n      }\n\n      canvasCtx.clearRect(0, 0, width, height);\n      canvasCtx.beginPath();\n      canvasCtx.arc(width / 2, height / 2, Math.min(height, width) / 2, 0, 2 * Math.PI);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fill();\n      var stepSize = Math.min(height, width) / 2.0 / reducedDataArray.length;\n      canvasCtx.strokeStyle = strokeColor;\n\n      for (var _i = 0; _i < reducedDataArray.length; _i++) {\n        canvasCtx.beginPath();\n        var normalized = reducedDataArray[_i] / 128;\n        var r = stepSize * _i + stepSize * normalized;\n        canvasCtx.arc(width / 2, height / 2, r, 0, 2 * Math.PI);\n        canvasCtx.stroke();\n      }\n    }\n\n    ;\n    draw();\n  },\n  hexToRgb: function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n};\nexport default Visualizer;","map":null,"metadata":{},"sourceType":"module"}