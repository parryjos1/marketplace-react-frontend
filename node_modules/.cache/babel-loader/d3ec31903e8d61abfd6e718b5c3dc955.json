{"ast":null,"code":"var _jsxFileName = \"/Users/joshparry/sei/projects/marketplace-app-MERN-stack/marketplace-react-frontend/src/components/speechRecog.jsx\";\nimport React, { Component } from \"react\";\nimport { ReactMic } from 'react-mic';\nexport class Example extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.startRecording = () => {\n      this.setState({\n        record: true\n      });\n    };\n\n    this.stopRecording = () => {\n      this.setState({\n        record: false\n      });\n    };\n\n    this.state = {\n      record: false\n    };\n  }\n\n  onData(recordedBlob) {\n    console.log('chunk of real-time data is: ', recordedBlob);\n  }\n\n  onStop(recordedBlob) {\n    console.log('recordedBlob is: ', recordedBlob);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(ReactMic, {\n      record: this.state.record,\n      className: \"sound-wave\",\n      onStop: this.onStop,\n      onData: this.onData,\n      strokeColor: \"#000000\",\n      backgroundColor: \"#FF4081\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onTouchTap: this.startRecording,\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Start\"), React.createElement(\"button\", {\n      onTouchTap: this.stopRecording,\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Stop\"));\n  }\n\n}\nexport default Example; // import PropTypes from \"prop-types\";\n// import SpeechRecognition from \"react-speech-recognition\";\n//\n// const propTypes = {\n//   // Props injected by SpeechRecognition\n//   transcript: PropTypes.string,\n//   resetTranscript: PropTypes.func,\n//   browserSupportsSpeechRecognition: PropTypes.bool\n// };\n//\n// const Dictaphone = ({\n//   transcript,\n//   resetTranscript,\n//   browserSupportsSpeechRecognition\n// }) => {\n//   if (!browserSupportsSpeechRecognition) {\n//     return null;\n//   }\n//\n//   return (\n//     <div>\n//       <button onClick={resetTranscript}>Reset</button>\n//       <span>{transcript}</span>\n//     </div>\n//   );\n// };\n//\n// Dictaphone.propTypes = propTypes;\n//\n// export default SpeechRecognition(Dictaphone);\n// import React, { Component } from 'react';\n//\n// import PropTypes from \"prop-types\";\n// import SpeechRecognition from \"react-speech-recognition\";\n//\n//\n//\n// class Speech extends Component {\n//\n//   const propTypes = {\n//     // Props injected by SpeechRecognition\n//     transcript: PropTypes.string,\n//     resetTranscript: PropTypes.func,\n//     browserSupportsSpeechRecognition: PropTypes.bool\n//   };\n//\n//   const Dictaphone = ({\n//     transcript,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition\n//   }) => {\n//     if (!browserSupportsSpeechRecognition) {\n//       return null;\n//     }\n//\n//   render(){\n//\n//     return(\n//       <div>\n//         <h3>Welcome to the speech </h3>\n//           <div>\n//        <button onClick={resetTranscript}>Reset</button>\n//        <span>{transcript}</span>\n//      </div>\n//       </div>\n//     )\n//   }\n// }\n//\n// export default Speech","map":{"version":3,"sources":["/Users/joshparry/sei/projects/marketplace-app-MERN-stack/marketplace-react-frontend/src/components/speechRecog.jsx"],"names":["React","Component","ReactMic","Example","constructor","props","startRecording","setState","record","stopRecording","state","onData","recordedBlob","console","log","onStop","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,QAAT,QAAyB,WAAzB;AAEA,OAAO,MAAMC,OAAN,SAAsBH,KAAK,CAACC,SAA5B,CAAsC;AAC3CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,cARmB,GAQF,MAAM;AACrB,WAAKC,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KAZkB;;AAAA,SAcnBC,aAdmB,GAcH,MAAM;AACpB,WAAKF,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KAlBkB;;AAEjB,SAAKE,KAAL,GAAa;AACXF,MAAAA,MAAM,EAAE;AADG,KAAb;AAID;;AAcDG,EAAAA,MAAM,CAACC,YAAD,EAAe;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,YAA5C;AACD;;AAEDG,EAAAA,MAAM,CAACH,YAAD,EAAe;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,YAAjC;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AACE,MAAA,MAAM,EAAE,KAAKN,KAAL,CAAWF,MADrB;AAEE,MAAA,SAAS,EAAC,YAFZ;AAGE,MAAA,MAAM,EAAE,KAAKO,MAHf;AAIE,MAAA,MAAM,EAAE,KAAKJ,MAJf;AAKE,MAAA,WAAW,EAAC,SALd;AAME,MAAA,eAAe,EAAC,SANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE;AAAQ,MAAA,UAAU,EAAE,KAAKL,cAAzB;AAAyC,MAAA,IAAI,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARF,EASE;AAAQ,MAAA,UAAU,EAAE,KAAKG,aAAzB;AAAwC,MAAA,IAAI,EAAC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,CADF;AAaD;;AA3C0C;AA8C7C,eAAeN,OAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\n\nimport { ReactMic } from 'react-mic';\n\nexport class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      record: false\n    }\n\n  }\n\n  startRecording = () => {\n    this.setState({\n      record: true\n    });\n  }\n\n  stopRecording = () => {\n    this.setState({\n      record: false\n    });\n  }\n\n  onData(recordedBlob) {\n    console.log('chunk of real-time data is: ', recordedBlob);\n  }\n\n  onStop(recordedBlob) {\n    console.log('recordedBlob is: ', recordedBlob);\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactMic\n          record={this.state.record}\n          className=\"sound-wave\"\n          onStop={this.onStop}\n          onData={this.onData}\n          strokeColor=\"#000000\"\n          backgroundColor=\"#FF4081\" />\n        <button onTouchTap={this.startRecording} type=\"button\">Start</button>\n        <button onTouchTap={this.stopRecording} type=\"button\">Stop</button>\n      </div>\n    );\n  }\n}\n\nexport default Example\n\n\n\n\n// import PropTypes from \"prop-types\";\n// import SpeechRecognition from \"react-speech-recognition\";\n//\n// const propTypes = {\n//   // Props injected by SpeechRecognition\n//   transcript: PropTypes.string,\n//   resetTranscript: PropTypes.func,\n//   browserSupportsSpeechRecognition: PropTypes.bool\n// };\n//\n// const Dictaphone = ({\n//   transcript,\n//   resetTranscript,\n//   browserSupportsSpeechRecognition\n// }) => {\n//   if (!browserSupportsSpeechRecognition) {\n//     return null;\n//   }\n//\n//   return (\n//     <div>\n//       <button onClick={resetTranscript}>Reset</button>\n//       <span>{transcript}</span>\n//     </div>\n//   );\n// };\n//\n// Dictaphone.propTypes = propTypes;\n//\n// export default SpeechRecognition(Dictaphone);\n\n\n\n\n// import React, { Component } from 'react';\n//\n// import PropTypes from \"prop-types\";\n// import SpeechRecognition from \"react-speech-recognition\";\n//\n//\n//\n// class Speech extends Component {\n//\n//   const propTypes = {\n//     // Props injected by SpeechRecognition\n//     transcript: PropTypes.string,\n//     resetTranscript: PropTypes.func,\n//     browserSupportsSpeechRecognition: PropTypes.bool\n//   };\n//\n//   const Dictaphone = ({\n//     transcript,\n//     resetTranscript,\n//     browserSupportsSpeechRecognition\n//   }) => {\n//     if (!browserSupportsSpeechRecognition) {\n//       return null;\n//     }\n//\n//   render(){\n//\n//     return(\n//       <div>\n//         <h3>Welcome to the speech </h3>\n//           <div>\n//        <button onClick={resetTranscript}>Reset</button>\n//        <span>{transcript}</span>\n//      </div>\n//       </div>\n//     )\n//   }\n// }\n//\n// export default Speech\n"]},"metadata":{},"sourceType":"module"}