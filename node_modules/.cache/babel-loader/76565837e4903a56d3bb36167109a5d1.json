{"ast":null,"code":"'use strict';\n\nconst //fs = require('react-native-fs'),\n__ = require('underscore');\n\nclass Image {\n  constructor(path) {\n    const options = __.isObject(path) ? path : {\n      path: path\n    };\n    this._path = options.path;\n    this._url = options.url;\n    this._base64 = options.base64;\n  }\n\n  load() {\n    return new Promise((resolve, reject) => {\n      if (this._path) {\n        resolve(fs.readFileSync(this._path).toString('base64')); //TODO: Implement for react native if it is needed\n      } else if (this._url) {\n        this._loadRemote().then(resolve);\n      } else if (this._base64) {\n        this._base64 = this._base64.substring(this._base64.indexOf(',') + 1); // remove 'data:image/jpeg;base64,' if included\n\n        resolve(this._base64);\n      } else {\n        console.log('No path or url are specified in image');\n        reject();\n      }\n    });\n  }\n\n  _loadRemote() {\n    return new Promise((resolve, reject) => {\n      request({\n        url: this._url,\n        encoding: null\n      }, (err, response, body) => {\n        if (!err && response.statusCode == 200) {\n          resolve(new Buffer(body).toString('base64'));\n        } else {\n          console.log('Error while loading image. code: ' + response.statusCode, err); // reject(err)\n\n          resolve(''); // reject(err)\n        }\n      });\n    });\n  }\n\n  build() {\n    return new Promise((resolve, reject) => {\n      this.load().then(cotent => {\n        resolve({\n          content: content\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = Image;","map":null,"metadata":{},"sourceType":"script"}