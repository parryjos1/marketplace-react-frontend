{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"/Users/joshparry/sei/projects/marketplace-app-MERN-stack/marketplace-react-frontend/src/components/speechRecog.jsx\";\nimport React, { Component } from 'react'; // import SpeechRecognition from 'react-speech-recognition'\n//-----------------SPEECH RECOGNITION SETUP---------------------\n// const SpeechRecognition = SpeechRecognition //|| webkitSpeechRecognition\n\nvar recognition = new window.webkitSpeechRecognition(); // const recognition = new SpeechRecognition()\n\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = 'en-US'; //------------------------COMPONENT-----------------------------\n\nclass Speech extends Component {\n  constructor() {\n    super();\n    this.state = {\n      listening: false\n    };\n    this.toggleListen = this.toggleListen.bind(this);\n    this.handleListen = this.handleListen.bind(this);\n  }\n\n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen);\n  }\n\n  handleListen() {\n    // handle speech recognition here\n    if (this.state.listening) recognition.start();\n    let finalTranscript = '';\n\n    recognition.onresult = event => {\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';else interimTranscript += transcript;\n      }\n\n      document.getElementById('interim').innerHTML = interimTranscript;\n      document.getElementById('final').innerHTML = finalTranscript;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"microphone-btn\",\n      style: button,\n      onClick: this.toggleListen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"interim\",\n      style: interim,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"final\",\n      style: final,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Speech; //-------------------------CSS------------------------------------\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  button: {\n    width: '60px',\n    height: '60px',\n    background: 'lightblue',\n    borderRadius: '50%',\n    margin: '6em 0 2em 0'\n  },\n  interim: {\n    color: 'gray',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  },\n  final: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  }\n};\nconst container = styles.container,\n      button = styles.button,\n      interim = styles.interim,\n      final = styles.final; // import React, { Component } from \"react\";\n//\n// import { ReactMic } from 'react-mic';\n//\n// export class Example extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       record: false\n//     }\n//\n//   }\n//\n//   startRecording = () => {\n//     this.setState({\n//       record: true\n//     });\n//   }\n//\n//   stopRecording = () => {\n//     this.setState({\n//       record: false\n//     });\n//   }\n//\n//   onData(recordedBlob) {\n//     console.log('chunk of real-time data is: ', recordedBlob);\n//   }\n//\n//   onStop(recordedBlob) {\n//     console.log('recordedBlob is: ', recordedBlob);\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <ReactMic\n//           record={this.state.record}\n//           className=\"sound-wave\"\n//           onStop={this.onStop}\n//           onData={this.onData}\n//           strokeColor=\"#000000\"\n//           backgroundColor=\"#FF4081\" />\n//         <button onTouchTap={this.startRecording} type=\"button\">Start</button>\n//         <button onTouchTap={this.stopRecording} type=\"button\">Stop</button>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default Example\n//\n//\n//\n//\n// // import PropTypes from \"prop-types\";\n// // import SpeechRecognition from \"react-speech-recognition\";\n// //\n// // const propTypes = {\n// //   // Props injected by SpeechRecognition\n// //   transcript: PropTypes.string,\n// //   resetTranscript: PropTypes.func,\n// //   browserSupportsSpeechRecognition: PropTypes.bool\n// // };\n// //\n// // const Dictaphone = ({\n// //   transcript,\n// //   resetTranscript,\n// //   browserSupportsSpeechRecognition\n// // }) => {\n// //   if (!browserSupportsSpeechRecognition) {\n// //     return null;\n// //   }\n// //\n// //   return (\n// //     <div>\n// //       <button onClick={resetTranscript}>Reset</button>\n// //       <span>{transcript}</span>\n// //     </div>\n// //   );\n// // };\n// //\n// // Dictaphone.propTypes = propTypes;\n// //\n// // export default SpeechRecognition(Dictaphone);\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// //\n// // import PropTypes from \"prop-types\";\n// // import SpeechRecognition from \"react-speech-recognition\";\n// //\n// //\n// //\n// // class Speech extends Component {\n// //\n// //   const propTypes = {\n// //     // Props injected by SpeechRecognition\n// //     transcript: PropTypes.string,\n// //     resetTranscript: PropTypes.func,\n// //     browserSupportsSpeechRecognition: PropTypes.bool\n// //   };\n// //\n// //   const Dictaphone = ({\n// //     transcript,\n// //     resetTranscript,\n// //     browserSupportsSpeechRecognition\n// //   }) => {\n// //     if (!browserSupportsSpeechRecognition) {\n// //       return null;\n// //     }\n// //\n// //   render(){\n// //\n// //     return(\n// //       <div>\n// //         <h3>Welcome to the speech </h3>\n// //           <div>\n// //        <button onClick={resetTranscript}>Reset</button>\n// //        <span>{transcript}</span>\n// //      </div>\n// //       </div>\n// //     )\n// //   }\n// // }\n// //\n// // export default Speech","map":{"version":3,"sources":["/Users/joshparry/sei/projects/marketplace-app-MERN-stack/marketplace-react-frontend/src/components/speechRecog.jsx"],"names":["React","Component","recognition","window","webkitSpeechRecognition","continous","interimResults","lang","Speech","constructor","state","listening","toggleListen","bind","handleListen","setState","start","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","render","container","button","interim","final","styles","display","flexDirection","alignItems","textAlign","width","height","background","borderRadius","margin","color","border","padding"],"mappings":"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":["'use strict'\nimport React, { Component } from 'react'\n// import SpeechRecognition from 'react-speech-recognition'\n\n//-----------------SPEECH RECOGNITION SETUP---------------------\n\n// const SpeechRecognition = SpeechRecognition //|| webkitSpeechRecognition\nvar recognition = new window.webkitSpeechRecognition\n// const recognition = new SpeechRecognition()\n\nrecognition.continous = true\nrecognition.interimResults = true\nrecognition.lang = 'en-US'\n\n//------------------------COMPONENT-----------------------------\n\nclass Speech extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      listening: false\n    }\n    this.toggleListen = this.toggleListen.bind(this)\n    this.handleListen = this.handleListen.bind(this)\n  }\n\n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen)\n  }\n\n  handleListen(){\n    // handle speech recognition here\n    if (this.state.listening) recognition.start()\n\nlet finalTranscript = ''\nrecognition.onresult = event => {\n  let interimTranscript = ''\n\n  for (let i = event.resultIndex; i < event.results.length; i++) {\n    const transcript = event.results[i][0].transcript;\n    if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n    else interimTranscript += transcript;\n  }\n  document.getElementById('interim').innerHTML = interimTranscript\n  document.getElementById('final').innerHTML = finalTranscript\n  }\n}\n\n  render() {\n    return (\n      <div style={container}>\n        <button id='microphone-btn' style={button} onClick={this.toggleListen} />\n        <div id='interim' style={interim}></div>\n        <div id='final' style={final}></div>\n      </div>\n    )\n  }\n}\n\nexport default Speech\n\n\n//-------------------------CSS------------------------------------\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  button: {\n    width: '60px',\n    height: '60px',\n    background: 'lightblue',\n    borderRadius: '50%',\n    margin: '6em 0 2em 0'\n  },\n  interim: {\n    color: 'gray',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  },\n  final: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  }\n}\n\nconst { container, button, interim, final } = styles\n\n// import React, { Component } from \"react\";\n//\n// import { ReactMic } from 'react-mic';\n//\n// export class Example extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       record: false\n//     }\n//\n//   }\n//\n//   startRecording = () => {\n//     this.setState({\n//       record: true\n//     });\n//   }\n//\n//   stopRecording = () => {\n//     this.setState({\n//       record: false\n//     });\n//   }\n//\n//   onData(recordedBlob) {\n//     console.log('chunk of real-time data is: ', recordedBlob);\n//   }\n//\n//   onStop(recordedBlob) {\n//     console.log('recordedBlob is: ', recordedBlob);\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <ReactMic\n//           record={this.state.record}\n//           className=\"sound-wave\"\n//           onStop={this.onStop}\n//           onData={this.onData}\n//           strokeColor=\"#000000\"\n//           backgroundColor=\"#FF4081\" />\n//         <button onTouchTap={this.startRecording} type=\"button\">Start</button>\n//         <button onTouchTap={this.stopRecording} type=\"button\">Stop</button>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default Example\n//\n//\n//\n//\n// // import PropTypes from \"prop-types\";\n// // import SpeechRecognition from \"react-speech-recognition\";\n// //\n// // const propTypes = {\n// //   // Props injected by SpeechRecognition\n// //   transcript: PropTypes.string,\n// //   resetTranscript: PropTypes.func,\n// //   browserSupportsSpeechRecognition: PropTypes.bool\n// // };\n// //\n// // const Dictaphone = ({\n// //   transcript,\n// //   resetTranscript,\n// //   browserSupportsSpeechRecognition\n// // }) => {\n// //   if (!browserSupportsSpeechRecognition) {\n// //     return null;\n// //   }\n// //\n// //   return (\n// //     <div>\n// //       <button onClick={resetTranscript}>Reset</button>\n// //       <span>{transcript}</span>\n// //     </div>\n// //   );\n// // };\n// //\n// // Dictaphone.propTypes = propTypes;\n// //\n// // export default SpeechRecognition(Dictaphone);\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// //\n// // import PropTypes from \"prop-types\";\n// // import SpeechRecognition from \"react-speech-recognition\";\n// //\n// //\n// //\n// // class Speech extends Component {\n// //\n// //   const propTypes = {\n// //     // Props injected by SpeechRecognition\n// //     transcript: PropTypes.string,\n// //     resetTranscript: PropTypes.func,\n// //     browserSupportsSpeechRecognition: PropTypes.bool\n// //   };\n// //\n// //   const Dictaphone = ({\n// //     transcript,\n// //     resetTranscript,\n// //     browserSupportsSpeechRecognition\n// //   }) => {\n// //     if (!browserSupportsSpeechRecognition) {\n// //       return null;\n// //     }\n// //\n// //   render(){\n// //\n// //     return(\n// //       <div>\n// //         <h3>Welcome to the speech </h3>\n// //           <div>\n// //        <button onClick={resetTranscript}>Reset</button>\n// //        <span>{transcript}</span>\n// //      </div>\n// //       </div>\n// //     )\n// //   }\n// // }\n// //\n// // export default Speech\n"]},"metadata":{},"sourceType":"module"}